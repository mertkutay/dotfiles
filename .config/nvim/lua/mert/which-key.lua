local wk = require("which-key")

wk.setup({
	spelling = {
		enabled = true,
	},
})

local mappings = {
	a = { "<cmd>Alpha<cr>", "Alpha" },
	b = { "<cmd>Telescope buffers<cr>", "Buffers" },
	c = { "<cmd>Bdelete<CR>", "Close Buffer" },
	e = { "<cmd>NvimTreeToggle<cr>", "Explorer" },
	f = { "<cmd>Telescope find_files hidden=true<cr>", "Find Files" },
	F = { "<cmd>Telescope live_grep<cr>", "Find Text" },
	g = {
		name = "Git",
		b = { "<cmd>Telescope git_branches<cr>", "Checkout Branch" },
		B = { "<cmd>Gitsigns blame_line<cr>", "Blame" },
		c = { "<cmd>Telescope git_commits<cr>", "Checkout Commit" },
		d = { "<cmd>Gitsigns diffthis HEAD<cr>", "Diff" },
		g = { "<cmd>lua _TOGGLE_CLI('lazygit')<CR>", "Lazygit" },
		j = { "<cmd>Gitsigns next_hunk<cr>", "Next Hunk" },
		k = { "<cmd>Gitsigns prev_hunk<cr>", "Prev Hunk" },
		o = { "<cmd>Telescope git_status<cr>", "Open Changed File" },
		p = { "<cmd>Gitsigns preview_hunk<cr>", "Preview Hunk" },
		r = { "<cmd>Gitsigns reset_hunk<cr>", "Reset Hunk" },
		R = { "<cmd>Gitsigns reset_buffer<cr>", "Reset Buffer" },
		s = { "<cmd>Gitsigns stage_hunk<cr>", "Stage Hunk" },
		u = { "<cmd>Gitsigns undo_stage_hunk<cr>", "Undo Stage Hunk" },
	},
	h = {
		name = "Help",
		c = { "<cmd>Telescope commands<cr>", "Commands" },
		h = { "<cmd>Telescope help_tags<cr>", "Find Help" },
		m = { "<cmd>Telescope man_pages<cr>", "Man Pages" },
		r = { "<cmd>Telescope oldfiles<cr>", "Open Recent File" },
		R = { "<cmd>Telescope registers<cr>", "Registers" },
		k = { "<cmd>Telescope keymaps<cr>", "Keymaps" },
		t = { "<cmd>lua require('telescope.builtin').colorscheme({enable_preview = true})<cr>", "Theme" },
	},
	l = {
		name = "LSP",
		a = { "<cmd> lua vim.lsp.buf.code_action()<CR>", "Code Action" },
		b = { "<cmd> Telescope lsp_document_diagnostics()<CR>", "Document Diagnostics" },
		d = { "<cmd>lua vim.lsp.buf.definition()<CR>", "Go to Definition" },
		D = { "<cmd>lua vim.lsp.buf.declaration()<CR>", "Go to Declaration" },
		f = { "<cmd>lua vim.lsp.buf.formatting()<CR>", "Format" },
		h = { "<cmd>lua vim.lsp.buf.hover()<CR>", "Hover" },
		i = { "<cmd>lua vim.lsp.buf.implementation()<CR>", "Go to Implementation" },
		I = { "<cmd>LspInfo<CR>", "Lsp Info" },
		j = { "<cmd>lua vim.diagnostic.goto_next()<CR>", "Go to Next Diagnostic" },
		k = { "<cmd>lua vim.diagnostic.goto_prev()<CR>", "Go to Previous Diagnostic" },
		l = { "<cmd>lua vim.diagnostic.open_float()<CR>", "Show Diagnostic" },
		q = { "<cmd>lua vim.diagnostic.setloclist()<CR>", "Open Diagnostics" },
		r = { "<cmd>Telescope lsp_references<CR>", "Find References" },
		R = { "<cmd>lua vim.lsp.buf.rename()<CR>", "Refactor" },
		s = { "<cmd>Telescope lsp_document_symbols<CR>", "Document Symbols" },
		S = { "<cmd>Telescope lsp_dynamic_workspace_symbols<CR>", "Workspace Symbols" },
		w = { "<cmd>Telescope lsp_workspace_diagnostics<CR>", "Workspace Diagnostics" },
	},
	p = {
		name = "Packer",
		c = { "<cmd>PackerCompile<cr>", "Compile" },
		i = { "<cmd>PackerInstall<cr>", "Install" },
		s = { "<cmd>PackerSync<cr>", "Sync" },
		S = { "<cmd>PackerStatus<cr>", "Status" },
		u = { "<cmd>PackerUpdate<cr>", "Update" },
	},
	P = { "<cmd>Telescope projects<cr>", "Projects" },
	q = { "<cmd>q<CR>", "Quit" },
	r = { "<cmd>NvimTreeRefresh<cr>", "Refresh Explorer" },
	t = {
		name = "Terminal",
		f = { "<cmd>ToggleTerm direction=float<cr>", "Float" },
		h = { "<cmd>ToggleTerm size=10 direction=horizontal<cr>", "Horizontal" },
		n = { "<cmd>lua _TOGGLE_CLI('node')<cr>", "Node" },
		p = { "<cmd>lua _TOGGLE_CLI('python')<cr>", "Python" },
		t = { "<cmd>lua _TOGGLE_CLI('gotop')<cr>", "Top" },
		v = { "<cmd>ToggleTerm size=80 direction=vertical<cr>", "Vertical" },
	},
	w = { "<cmd>w!<CR>", "Save" },
}

wk.register(mappings, { prefix = "<leader>" })
