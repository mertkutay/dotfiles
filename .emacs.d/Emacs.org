#+title: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* User Information

#+begin_src emacs-lisp

  (setq user-full-name "Mert Kutay"
        user-mail-address "mertckutay@gmail.com")
  (setq auth-sources '("~/.authinfo"))

#+end_src

* Package System Setup

#+begin_src emacs-lisp

  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

  (use-package exec-path-from-shell
    :init
    (setq exec-path-from-shell-arguments nil)
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)))

#+end_src

* UI Configuration

** Visual Configuration

#+begin_src emacs-lisp

  (setq inhibit-startup-message t)
  (setq ring-bell-function 'ignore)

  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (menu-bar-mode -1)
  (set-fringe-mode 10)
  (save-place-mode t)

#+end_src

** Line Numbers

#+begin_src emacs-lisp

  (column-number-mode)
  (global-display-line-numbers-mode t)
  (setq display-line-numbers-type 'relative)
  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  treemacs-mode-hook
                  term-mode-hook
                  vterm-mode-hook
                  shell-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda ()
                     (display-line-numbers-mode 0))))

#+end_src

** Auto Pairs

#+begin_src emacs-lisp

  (electric-pair-mode 1)
  (setq-default electric-pair-inhibit-predicate
                'electric-pair-conservative-inhibit)
  (add-hook
   'org-mode-hook
   (lambda ()
     (setq-local electric-pair-inhibit-predicate
                 `(lambda (c)
                    (if (char-equal c ?<)
                        t (,electric-pair-inhibit-predicate c))))))

#+end_src

** Font Configuration

#+begin_src emacs-lisp

  (defvar mk/default-font-size 150)
  (defvar mk/default-variable-font-size 150)

  (set-face-attribute 'default nil :font "SauceCodePro Nerd Font Mono" :height mk/default-font-size)

#+end_src

** Keybinding Configuration

#+begin_src emacs-lisp

  (setq-default tab-width 4)
  (setq-default indent-tabs-mode nil)
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (modify-syntax-entry ?_ "w")
  (setq mac-command-modifier 'meta)
  (setq mac-option-modifier nil)

  (use-package general
    :config
    (general-create-definer rune/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (rune/leader-keys
      "t"  '(:ignore t :which-key "toggles")
      "tt" '(counsel-load-theme :which-key "choose theme")))

  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (evil-set-undo-system 'undo-redo)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)
    (define-key evil-window-map (kbd "C-h") 'evil-window-left)
    (define-key evil-window-map (kbd "C-j") 'evil-window-down)
    (define-key evil-window-map (kbd "C-k") 'evil-window-up)
    (define-key evil-window-map (kbd "C-l") 'evil-window-right)
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config (evil-collection-init))

#+end_src

** Multi Cursors

#+begin_src emacs-lisp

  (use-package evil-mc
    :after evil
    :config (global-evil-mc-mode)
    (evil-define-minor-mode-key '(normal visual) 'evil-mc-mode
      (kbd "C-n") 'evil-mc-make-and-goto-next-match
      (kbd "C-t") 'evil-mc-skip-and-goto-next-match
      (kbd "C-p") 'evil-mc-make-and-goto-prev-match))

#+end_src

** Surround

#+begin_src emacs-lisp

  (use-package evil-surround
    :config (global-evil-surround-mode 1))

#+end_src

** Color Theme

#+begin_src emacs-lisp

  (use-package doom-themes
    :init (load-theme 'doom-gruvbox t))

#+end_src

** Better Modeline

#+begin_src emacs-lisp

  (use-package all-the-icons)

  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))

#+end_src

** Smooth Scrolling

#+begin_src emacs-lisp

  (setq scroll-step 1
        scroll-margin 1
        scroll-conservatively 100000)

#+end_src

** Which Key

#+begin_src emacs-lisp

  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))

#+end_src

** Ivy and Counsel

#+begin_src emacs-lisp

  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))

  (use-package counsel
    :bind (("C-M-j" . 'counsel-switch-buffer)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :config
    (counsel-mode 1))

#+end_src

** Helpful Help Commands

#+begin_src emacs-lisp

  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

#+end_src

** Text Scaling

#+begin_src emacs-lisp

  (use-package hydra)

  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

  (rune/leader-keys
    "ts" '(hydra-text-scale/body :which-key "scale text"))

#+end_src

* File Management

** Dired

#+begin_src emacs-lisp

  (defvar mk/dired-hidden nil)

  (defun mk/dired-hidden-switch ()
    (interactive)
    (if mk/dired-hidden
        (setq mk/dired-hidden nil)
      (setq mk/dired-hidden t))
    (mk/dired-ls)
    (revert-buffer))

  (defun mk/dired-ls ()
    (if mk/dired-hidden
        (dired-sort-other "-gho --group-directories-first")
      (dired-sort-other "-agho --group-directories-first")))

  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :config
    (setq trash-directory "~/.Trash")
    (setq delete-by-moving-to-trash t)
    (setq dired-kill-when-opening-new-dired-buffer t)
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-up-directory
      "l" 'dired-find-file
      "H" 'mk/dired-hidden-switch))

  (add-hook 'dired-mode-hook 'mk/dired-ls)

  (use-package
    all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

#+end_src

* Org Mode

** Basic Config

#+begin_src emacs-lisp

  (defun mk/org-mode-setup ()
    (org-indent-mode)
    (visual-line-mode 1))

  (use-package org
    :hook (org-mode . mk/org-mode-setup)
    :config
    (setq org-ellipsis " ")

    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    (setq org-directory "~/org/")
    (setq org-agenda-files
          '("~/org/Tasks.org"))

    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)

    (setq org-todo-keywords
      '((sequence "TODO(t)" "PROGRESS(p)" "|" "DONE(d!)")))

    (setq org-refile-targets
      '(("Tasks.org" :maxlevel . 1)))

    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    (setq org-tag-alist
      '((:startgroup)
         ; Put mutually exclusive tags here
         (:endgroup)
         ("@errand" . ?E)
         ("@home" . ?H)
         ("@work" . ?W)))

    (define-key global-map (kbd "C-c j")
      (lambda () (interactive) (org-capture nil "jj"))))

#+end_src

*** Nicer Heading Bullets

#+begin_src emacs-lisp

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

*** Center Org Buffers

#+begin_src emacs-lisp

  (defun mk/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . mk/org-mode-visual-fill))

#+end_src

** Configure Babel Languages

#+begin_src emacs-lisp

  (org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t)
      (shell . t)
      (python . t)))

  (setq org-confirm-babel-evaluate nil)

#+end_src

** Auto-tangle Configuration Files

#+begin_src emacs-lisp

  (defun mk/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.emacs.d/Emacs.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook 'mk/org-babel-tangle-config)))

#+end_src

** Structure Templates

#+begin_src emacs-lisp

  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))

#+end_src

* Development

** Flycheck

#+begin_src emacs-lisp

  (use-package flycheck
    :init (global-flycheck-mode))

#+end_src

** Formatting

#+begin_src emacs-lisp

  (use-package format-all
    :hook (prog-mode . format-all-mode))

  (add-hook 'format-all-mode-hook 'format-all-ensure-formatter)

#+end_src

** Commenting

#+begin_src emacs-lisp

  (use-package evil-nerd-commenter)

#+end_src

** Folding

#+begin_src emacs-lisp

  (add-hook 'prog-mode-hook 'hs-minor-mode)

#+end_src

** Rainbow Delimiters

#+begin_src emacs-lisp

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

** Language Servers

#+begin_src emacs-lisp

  (defun mk/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . mk/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c l")
    :config
    (lsp-enable-which-key-integration t))

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode))

  (use-package lsp-treemacs
    :after lsp)

  (use-package lsp-ivy)

#+end_src

*** Python

#+begin_src emacs-lisp

  (use-package lsp-pyright
    :hook (python-mode . lsp-deferred))

  (use-package py-isort
    :hook (before-save . py-isort-before-save))

#+end_src

*** Javascript / Typescript

#+begin_src emacs-lisp

  (use-package typescript-mode
    :mode ("\\.js\\'"
           "\\.ts\\'")
    :hook (typescript-mode . lsp-deferred)
    :config
    (setq typescript-indent-level 2))

#+end_src

*** YAML

#+begin_src emacs-lisp

  (use-package yaml-mode
    :mode ("\\.yml\\'"
           "\\.yaml\\'"))

#+end_src

*** Docker

#+begin_src emacs-lisp

  (use-package dockerfile-mode
    :mode ("\\Dockerfile\\'"
           "\\.dockerfile\\'"))

  (use-package docker
    :bind ("C-c d" . docker))

#+end_src

** Company Mode

#+begin_src emacs-lisp

  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind
    (:map company-active-map
          ("<tab>" . company-complete-selection))
    (:map lsp-mode-map
          ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))

#+end_src

** Projectile

#+begin_src emacs-lisp

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (when (file-directory-p "~/projects")
      (setq projectile-project-search-path '("~/projects"))))

  (use-package counsel-projectile
    :config (counsel-projectile-mode)
    (counsel-projectile-modify-action
     'counsel-projectile-switch-project-action
     '((default counsel-projectile-switch-project-action-dired))))

#+end_src

** Git

#+begin_src emacs-lisp

  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  (use-package forge
    :after magit)

  (use-package git-gutter
    :init (global-git-gutter-mode t)
    :custom
    (git-gutter:update-interval 2))

#+end_src

* Terminals

** term-mode

#+begin_src emacs-lisp

  (use-package term
    :config
    (setq explicit-shell-file-name "bash")
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))

  (use-package eterm-256color
    :hook (term-mode . eterm-256color-mode))

#+end_src

** v-term

#+begin_src emacs-lisp

  (use-package vterm
    :commands vterm
    :config
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")
    (setq vterm-max-scrollback 10000))

#+end_src

** Eshell

#+begin_src emacs-lisp

  (defun mk/configure-shell ()
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
    (evil-normalize-keymaps)

    (setq eshell-history-size 10000
          eshell-buffer-maximum-lines 10000
          eshell-hist-ignoredups t
          eshell-scroll-to-bottom-on-input t))

  (use-package eshell-git-prompt)

  (use-package eshell
    :hook (eshell-first-time-mode . mk/configure-shell)
    :config
    (with-eval-after-load 'esh-opt
      (setq eshell-destroy-buffer-when-process-dies t)
      (setq eshell-visual-commands '("htop" "zsh" "vim")))
    (eshell-git-prompt-use-theme 'robbyrussell))

#+end_src
